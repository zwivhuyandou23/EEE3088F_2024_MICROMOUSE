
code_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800229c  0800229c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800229c  0800229c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800229c  0800229c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022a0  080022a0  000122a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080022b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080022b0  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004605  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001301  00000000  00000000  0002467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e0  00000000  00000000  00025980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000393  00000000  00000000  00025e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011d1e  00000000  00000000  000261f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006b79  00000000  00000000  00037f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006df93  00000000  00000000  0003ea8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f9c  00000000  00000000  000aca20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  000ad9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002254 	.word	0x08002254

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002254 	.word	0x08002254

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lcd_init>:
  lcd_string(line2);
}

//============================================================================

void lcd_init () {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /*This function sets up the port lines for the LCD and initializes
  the LCD module for use.*/
  // set the relevant pins to outputs
  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000224:	4b37      	ldr	r3, [pc, #220]	; (8000304 <lcd_init+0xe4>)
 8000226:	695a      	ldr	r2, [r3, #20]
 8000228:	4b36      	ldr	r3, [pc, #216]	; (8000304 <lcd_init+0xe4>)
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	0309      	lsls	r1, r1, #12
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
  RCC->AHBENR |= RCC_AHBENR_GPIOBEN; 
 8000232:	4b34      	ldr	r3, [pc, #208]	; (8000304 <lcd_init+0xe4>)
 8000234:	695a      	ldr	r2, [r3, #20]
 8000236:	4b33      	ldr	r3, [pc, #204]	; (8000304 <lcd_init+0xe4>)
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	02c9      	lsls	r1, r1, #11
 800023c:	430a      	orrs	r2, r1
 800023e:	615a      	str	r2, [r3, #20]
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN; 
 8000240:	4b30      	ldr	r3, [pc, #192]	; (8000304 <lcd_init+0xe4>)
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <lcd_init+0xe4>)
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0289      	lsls	r1, r1, #10
 800024a:	430a      	orrs	r2, r1
 800024c:	615a      	str	r2, [r3, #20]
  GPIOC->MODER |= GPIO_MODER_MODER14_0;
 800024e:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <lcd_init+0xe8>)
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	4b2d      	ldr	r3, [pc, #180]	; (8000308 <lcd_init+0xe8>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	0549      	lsls	r1, r1, #21
 8000258:	430a      	orrs	r2, r1
 800025a:	601a      	str	r2, [r3, #0]
  GPIOC->MODER |= GPIO_MODER_MODER15_0;
 800025c:	4b2a      	ldr	r3, [pc, #168]	; (8000308 <lcd_init+0xe8>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b29      	ldr	r3, [pc, #164]	; (8000308 <lcd_init+0xe8>)
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	05c9      	lsls	r1, r1, #23
 8000266:	430a      	orrs	r2, r1
 8000268:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER8_0;
 800026a:	4b28      	ldr	r3, [pc, #160]	; (800030c <lcd_init+0xec>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b27      	ldr	r3, [pc, #156]	; (800030c <lcd_init+0xec>)
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	0249      	lsls	r1, r1, #9
 8000274:	430a      	orrs	r2, r1
 8000276:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER9_0;
 8000278:	4b24      	ldr	r3, [pc, #144]	; (800030c <lcd_init+0xec>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b23      	ldr	r3, [pc, #140]	; (800030c <lcd_init+0xec>)
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	02c9      	lsls	r1, r1, #11
 8000282:	430a      	orrs	r2, r1
 8000284:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER12_0;
 8000286:	2390      	movs	r3, #144	; 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	2390      	movs	r3, #144	; 0x90
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	0449      	lsls	r1, r1, #17
 8000294:	430a      	orrs	r2, r1
 8000296:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER15_0;
 8000298:	2390      	movs	r3, #144	; 0x90
 800029a:	05db      	lsls	r3, r3, #23
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	2390      	movs	r3, #144	; 0x90
 80002a0:	05db      	lsls	r3, r3, #23
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	05c9      	lsls	r1, r1, #23
 80002a6:	430a      	orrs	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]

  delay(30000); //allow the LCD 30 ms power up time
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <lcd_init+0xf0>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 f8e1 	bl	8000474 <delay>
  // in case in 2nd nibble of 4 bit tansfer, this goes to 1st nibble
  // if byte in 8-bit mode, keeps in 8-bit mode
  lcd_write4bits(0x03);   
 80002b2:	2003      	movs	r0, #3
 80002b4:	f000 f878 	bl	80003a8 <lcd_write4bits>
  delay(4100);
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <lcd_init+0xf4>)
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 f8da 	bl	8000474 <delay>
  lcd_write4bits(0x03);  // garanteed to be byte of 8-bit data for first byte of 4-bit.
 80002c0:	2003      	movs	r0, #3
 80002c2:	f000 f871 	bl	80003a8 <lcd_write4bits>
  delay(39);
 80002c6:	2027      	movs	r0, #39	; 0x27
 80002c8:	f000 f8d4 	bl	8000474 <delay>
  lcd_write4bits(0x03); // necessary in case this is the 2nd nibble of 4-bit transfer.
 80002cc:	2003      	movs	r0, #3
 80002ce:	f000 f86b 	bl	80003a8 <lcd_write4bits>
  delay(39);
 80002d2:	2027      	movs	r0, #39	; 0x27
 80002d4:	f000 f8ce 	bl	8000474 <delay>
  // switch to 4-bit. This will latch in a byte as it's garanteed to now be in 8-bit
  lcd_write4bits(0x02);   
 80002d8:	2002      	movs	r0, #2
 80002da:	f000 f865 	bl	80003a8 <lcd_write4bits>
  delay(39);
 80002de:	2027      	movs	r0, #39	; 0x27
 80002e0:	f000 f8c8 	bl	8000474 <delay>
  lcd_command(LCD_FOUR_BIT_TWO_LINE_MODE); //0x28
 80002e4:	2028      	movs	r0, #40	; 0x28
 80002e6:	f000 f817 	bl	8000318 <lcd_command>
  lcd_command(LCD_DISPLAY_OFF); // 0x08
 80002ea:	2008      	movs	r0, #8
 80002ec:	f000 f814 	bl	8000318 <lcd_command>
  lcd_command(LCD_CLEAR_DISPLAY); // 0x01
 80002f0:	2001      	movs	r0, #1
 80002f2:	f000 f811 	bl	8000318 <lcd_command>
  lcd_command(LCD_DISPLAY_ON); // 0x0C
 80002f6:	200c      	movs	r0, #12
 80002f8:	f000 f80e 	bl	8000318 <lcd_command>
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	40021000 	.word	0x40021000
 8000308:	48000800 	.word	0x48000800
 800030c:	48000400 	.word	0x48000400
 8000310:	00007530 	.word	0x00007530
 8000314:	00001004 	.word	0x00001004

08000318 <lcd_command>:

//============================================================================

void lcd_command (enum LcdCommand command) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	0002      	movs	r2, r0
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	701a      	strb	r2, [r3, #0]
  //This function sends a command to the LCD. 
  //Care is taken not to interfere with the other lines on the port.
  lcd_put((uint8_t)command, COMMAND);
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2100      	movs	r1, #0
 800032a:	0018      	movs	r0, r3
 800032c:	f000 f80a 	bl	8000344 <lcd_put>
  delay(1530); // 1.53 ms is the maximum delay we should need for any command.
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <lcd_command+0x28>)
 8000332:	0018      	movs	r0, r3
 8000334:	f000 f89e 	bl	8000474 <delay>
  // TODO: fix the above to have variable lengths as required by different commands.
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b002      	add	sp, #8
 800033e:	bd80      	pop	{r7, pc}
 8000340:	000005fa 	.word	0x000005fa

08000344 <lcd_put>:

//============================================================================

static void lcd_put (uint8_t character, enum TypeOfCharacter ch_type) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	0002      	movs	r2, r0
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	1dbb      	adds	r3, r7, #6
 8000352:	1c0a      	adds	r2, r1, #0
 8000354:	701a      	strb	r2, [r3, #0]
    //Puts a single character on the LCD at the next position on the screen.
    //The character to be printed is in the input parameter. For numbers, letters 
    //and other common characters the ASCII code will produce correct display.
    //Refer to the Hitachi HD44780 datasheet for full character set information.
    if (ch_type == TEXT) {
 8000356:	1dbb      	adds	r3, r7, #6
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d107      	bne.n	800036e <lcd_put+0x2a>
        GPIOC->BSRR |= GPIO_BSRR_BS_14;// pull RS (PC14) high
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <lcd_put+0x60>)
 8000360:	699a      	ldr	r2, [r3, #24]
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <lcd_put+0x60>)
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	01c9      	lsls	r1, r1, #7
 8000368:	430a      	orrs	r2, r1
 800036a:	619a      	str	r2, [r3, #24]
 800036c:	e00a      	b.n	8000384 <lcd_put+0x40>
    } else if (ch_type == COMMAND) {
 800036e:	1dbb      	adds	r3, r7, #6
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d106      	bne.n	8000384 <lcd_put+0x40>
        GPIOC->BSRR |= GPIO_BSRR_BR_14;// pull RS (PC14) low
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <lcd_put+0x60>)
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <lcd_put+0x60>)
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	05c9      	lsls	r1, r1, #23
 8000380:	430a      	orrs	r2, r1
 8000382:	619a      	str	r2, [r3, #24]
    }
    // write upper nibble
    lcd_write4bits(character >> 4);
 8000384:	1dfb      	adds	r3, r7, #7
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	091b      	lsrs	r3, r3, #4
 800038a:	b2db      	uxtb	r3, r3
 800038c:	0018      	movs	r0, r3
 800038e:	f000 f80b 	bl	80003a8 <lcd_write4bits>
    // write lower nibble
    lcd_write4bits(character);
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	0018      	movs	r0, r3
 8000398:	f000 f806 	bl	80003a8 <lcd_write4bits>
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b002      	add	sp, #8
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	48000800 	.word	0x48000800

080003a8 <lcd_write4bits>:

// This function outputs the lower 4 bits onto the data lines
static void lcd_write4bits(uint8_t character) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	0002      	movs	r2, r0
 80003b0:	1dfb      	adds	r3, r7, #7
 80003b2:	701a      	strb	r2, [r3, #0]
  // lower nibble to data lines
  if ((character & 0x08) != 0) {
 80003b4:	1dfb      	adds	r3, r7, #7
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2208      	movs	r2, #8
 80003ba:	4013      	ands	r3, r2
 80003bc:	d009      	beq.n	80003d2 <lcd_write4bits+0x2a>
    GPIOA->BSRR |= GPIO_BSRR_BS_15;
 80003be:	2390      	movs	r3, #144	; 0x90
 80003c0:	05db      	lsls	r3, r3, #23
 80003c2:	699a      	ldr	r2, [r3, #24]
 80003c4:	2390      	movs	r3, #144	; 0x90
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	0209      	lsls	r1, r1, #8
 80003cc:	430a      	orrs	r2, r1
 80003ce:	619a      	str	r2, [r3, #24]
 80003d0:	e008      	b.n	80003e4 <lcd_write4bits+0x3c>
  } else {
    GPIOA->BSRR |= GPIO_BSRR_BR_15;
 80003d2:	2390      	movs	r3, #144	; 0x90
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	699a      	ldr	r2, [r3, #24]
 80003d8:	2390      	movs	r3, #144	; 0x90
 80003da:	05db      	lsls	r3, r3, #23
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0609      	lsls	r1, r1, #24
 80003e0:	430a      	orrs	r2, r1
 80003e2:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x04) != 0) {
 80003e4:	1dfb      	adds	r3, r7, #7
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2204      	movs	r2, #4
 80003ea:	4013      	ands	r3, r2
 80003ec:	d009      	beq.n	8000402 <lcd_write4bits+0x5a>
    GPIOA->BSRR |= GPIO_BSRR_BS_12;
 80003ee:	2390      	movs	r3, #144	; 0x90
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	699a      	ldr	r2, [r3, #24]
 80003f4:	2390      	movs	r3, #144	; 0x90
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	0149      	lsls	r1, r1, #5
 80003fc:	430a      	orrs	r2, r1
 80003fe:	619a      	str	r2, [r3, #24]
 8000400:	e008      	b.n	8000414 <lcd_write4bits+0x6c>
  } else {
    GPIOA->BSRR |= GPIO_BSRR_BR_12;
 8000402:	2390      	movs	r3, #144	; 0x90
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	699a      	ldr	r2, [r3, #24]
 8000408:	2390      	movs	r3, #144	; 0x90
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0549      	lsls	r1, r1, #21
 8000410:	430a      	orrs	r2, r1
 8000412:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x02) != 0) {
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2202      	movs	r2, #2
 800041a:	4013      	ands	r3, r2
 800041c:	d007      	beq.n	800042e <lcd_write4bits+0x86>
    GPIOB->BSRR |= GPIO_BSRR_BS_9;
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <lcd_write4bits+0xc8>)
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <lcd_write4bits+0xc8>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0089      	lsls	r1, r1, #2
 8000428:	430a      	orrs	r2, r1
 800042a:	619a      	str	r2, [r3, #24]
 800042c:	e006      	b.n	800043c <lcd_write4bits+0x94>
  } else {
    GPIOB->BSRR |= GPIO_BSRR_BR_9;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <lcd_write4bits+0xc8>)
 8000430:	699a      	ldr	r2, [r3, #24]
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <lcd_write4bits+0xc8>)
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0489      	lsls	r1, r1, #18
 8000438:	430a      	orrs	r2, r1
 800043a:	619a      	str	r2, [r3, #24]
  } 
  if ((character & 0x01) != 0) {
 800043c:	1dfb      	adds	r3, r7, #7
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2201      	movs	r2, #1
 8000442:	4013      	ands	r3, r2
 8000444:	d007      	beq.n	8000456 <lcd_write4bits+0xae>
    GPIOB->BSRR |= GPIO_BSRR_BS_8;
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <lcd_write4bits+0xc8>)
 8000448:	699a      	ldr	r2, [r3, #24]
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <lcd_write4bits+0xc8>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0049      	lsls	r1, r1, #1
 8000450:	430a      	orrs	r2, r1
 8000452:	619a      	str	r2, [r3, #24]
 8000454:	e006      	b.n	8000464 <lcd_write4bits+0xbc>
  } else {
    GPIOB->BSRR |= GPIO_BSRR_BR_8;
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <lcd_write4bits+0xc8>)
 8000458:	699a      	ldr	r2, [r3, #24]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <lcd_write4bits+0xc8>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	0449      	lsls	r1, r1, #17
 8000460:	430a      	orrs	r2, r1
 8000462:	619a      	str	r2, [r3, #24]
  }
  pulse_strobe ();
 8000464:	f000 f820 	bl	80004a8 <pulse_strobe>
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b002      	add	sp, #8
 800046e:	bd80      	pop	{r7, pc}
 8000470:	48000400 	.word	0x48000400

08000474 <delay>:

//============================================================================


static void delay(uint32_t microseconds) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* Hangs for specified number of microseconds. */
  volatile uint32_t counter = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  microseconds *= 3;
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	0013      	movs	r3, r2
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	189b      	adds	r3, r3, r2
 8000488:	607b      	str	r3, [r7, #4]
  for(; counter<microseconds; counter++) {
 800048a:	e004      	b.n	8000496 <delay+0x22>
    __asm("nop");
 800048c:	46c0      	nop			; (mov r8, r8)
    __asm("nop");
 800048e:	46c0      	nop			; (mov r8, r8)
  for(; counter<microseconds; counter++) {
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3301      	adds	r3, #1
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	429a      	cmp	r2, r3
 800049c:	d8f6      	bhi.n	800048c <delay+0x18>
  }
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b004      	add	sp, #16
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <pulse_strobe>:

static void pulse_strobe (void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  //Pulse the strobe line of the LCD to indicate that data is ready.
  delay(1);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff ffe1 	bl	8000474 <delay>
  GPIOC->BSRR |= GPIO_BSRR_BS_15;// pull E (PC15) high
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <pulse_strobe+0x38>)
 80004b4:	699a      	ldr	r2, [r3, #24]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <pulse_strobe+0x38>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0209      	lsls	r1, r1, #8
 80004bc:	430a      	orrs	r2, r1
 80004be:	619a      	str	r2, [r3, #24]
  delay(1);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffd7 	bl	8000474 <delay>
  GPIOC->BSRR |= GPIO_BSRR_BR_15;// pull E (PC15) low
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <pulse_strobe+0x38>)
 80004c8:	699a      	ldr	r2, [r3, #24]
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <pulse_strobe+0x38>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0609      	lsls	r1, r1, #24
 80004d0:	430a      	orrs	r2, r1
 80004d2:	619a      	str	r2, [r3, #24]
  delay(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff ffcd 	bl	8000474 <delay>
}                     
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	48000800 	.word	0x48000800

080004e4 <delay_ms>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void delay_ms(uint32_t ms) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fb18 	bl	8000b24 <HAL_Delay>
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 faac 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f8c4 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f97e 	bl	8000808 <MX_GPIO_Init>
  MX_ADC_Init();
 800050c:	f000 f906 	bl	800071c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(); // set up LCD lines and send initialisation commands
 8000510:	f7ff fe86 	bl	8000220 <lcd_init>
  lcd_command(LCD_CLEAR_DISPLAY);
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff feff 	bl	8000318 <lcd_command>

	  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	     ADC1->CHSELR = ADC_CHSELR_CHSEL1;
 800051a:	4b57      	ldr	r3, [pc, #348]	; (8000678 <main+0x17c>)
 800051c:	2202      	movs	r2, #2
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
		      HAL_Delay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 faff 	bl	8000b24 <HAL_Delay>
			 // adc_set_channel(channel);
			  adc_value_front_sensor = read_adc() ;
 8000526:	f000 f9c3 	bl	80008b0 <read_adc>
 800052a:	0003      	movs	r3, r0
 800052c:	001a      	movs	r2, r3
 800052e:	4b53      	ldr	r3, [pc, #332]	; (800067c <main+0x180>)
 8000530:	801a      	strh	r2, [r3, #0]
			 HAL_ADC_Stop(&hadc);
 8000532:	4b53      	ldr	r3, [pc, #332]	; (8000680 <main+0x184>)
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fcad 	bl	8000e94 <HAL_ADC_Stop>

				 if(adc_value_front_sensor > 539) {
 800053a:	4b50      	ldr	r3, [pc, #320]	; (800067c <main+0x180>)
 800053c:	881a      	ldrh	r2, [r3, #0]
 800053e:	2387      	movs	r3, #135	; 0x87
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	429a      	cmp	r2, r3
 8000544:	d306      	bcc.n	8000554 <main+0x58>
					 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000546:	4b4f      	ldr	r3, [pc, #316]	; (8000684 <main+0x188>)
 8000548:	2201      	movs	r2, #1
 800054a:	2140      	movs	r1, #64	; 0x40
 800054c:	0018      	movs	r0, r3
 800054e:	f001 f9f9 	bl	8001944 <HAL_GPIO_WritePin>
 8000552:	e00b      	b.n	800056c <main+0x70>
				  }
				 else if (adc_value_front_sensor <= 431){
 8000554:	4b49      	ldr	r3, [pc, #292]	; (800067c <main+0x180>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	23d8      	movs	r3, #216	; 0xd8
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	429a      	cmp	r2, r3
 800055e:	d205      	bcs.n	800056c <main+0x70>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000560:	4b48      	ldr	r3, [pc, #288]	; (8000684 <main+0x188>)
 8000562:	2200      	movs	r2, #0
 8000564:	2140      	movs	r1, #64	; 0x40
 8000566:	0018      	movs	r0, r3
 8000568:	f001 f9ec 	bl	8001944 <HAL_GPIO_WritePin>

			  }


			  ADC1->CHSELR = ADC_CHSELR_CHSEL2;
 800056c:	4b42      	ldr	r3, [pc, #264]	; (8000678 <main+0x17c>)
 800056e:	2204      	movs	r2, #4
 8000570:	629a      	str	r2, [r3, #40]	; 0x28
			  HAL_Delay(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f000 fad6 	bl	8000b24 <HAL_Delay>
			 // adc_set_channel(channel);
			  adc_value_right_sensor = read_adc() ;
 8000578:	f000 f99a 	bl	80008b0 <read_adc>
 800057c:	0003      	movs	r3, r0
 800057e:	001a      	movs	r2, r3
 8000580:	4b41      	ldr	r3, [pc, #260]	; (8000688 <main+0x18c>)
 8000582:	801a      	strh	r2, [r3, #0]
			  HAL_ADC_Stop(&hadc);
 8000584:	4b3e      	ldr	r3, [pc, #248]	; (8000680 <main+0x184>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fc84 	bl	8000e94 <HAL_ADC_Stop>

			 if(adc_value_right_sensor > 539) {
 800058c:	4b3e      	ldr	r3, [pc, #248]	; (8000688 <main+0x18c>)
 800058e:	881a      	ldrh	r2, [r3, #0]
 8000590:	2387      	movs	r3, #135	; 0x87
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	429a      	cmp	r2, r3
 8000596:	d306      	bcc.n	80005a6 <main+0xaa>
			 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000598:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <main+0x188>)
 800059a:	2201      	movs	r2, #1
 800059c:	2120      	movs	r1, #32
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 f9d0 	bl	8001944 <HAL_GPIO_WritePin>
 80005a4:	e00b      	b.n	80005be <main+0xc2>
			 		  }
			 else if (adc_value_right_sensor <= 431){
 80005a6:	4b38      	ldr	r3, [pc, #224]	; (8000688 <main+0x18c>)
 80005a8:	881a      	ldrh	r2, [r3, #0]
 80005aa:	23d8      	movs	r3, #216	; 0xd8
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d205      	bcs.n	80005be <main+0xc2>
			 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <main+0x188>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 f9c3 	bl	8001944 <HAL_GPIO_WritePin>
			 		  }

			 ADC1->CHSELR = ADC_CHSELR_CHSEL3;
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <main+0x17c>)
 80005c0:	2208      	movs	r2, #8
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
			 HAL_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 faad 	bl	8000b24 <HAL_Delay>
			// adc_set_channel(channel);
			 adc_value_left_sensor = read_adc() ;
 80005ca:	f000 f971 	bl	80008b0 <read_adc>
 80005ce:	0003      	movs	r3, r0
 80005d0:	001a      	movs	r2, r3
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <main+0x190>)
 80005d4:	801a      	strh	r2, [r3, #0]
			 HAL_ADC_Stop(&hadc);
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <main+0x184>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fc5b 	bl	8000e94 <HAL_ADC_Stop>

			 if(adc_value_left_sensor > 539) {
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <main+0x190>)
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	2387      	movs	r3, #135	; 0x87
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d306      	bcc.n	80005f8 <main+0xfc>
			 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <main+0x188>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f9a7 	bl	8001944 <HAL_GPIO_WritePin>
 80005f6:	e00b      	b.n	8000610 <main+0x114>
			 		  }
			 else if (adc_value_left_sensor <= 431){
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <main+0x190>)
 80005fa:	881a      	ldrh	r2, [r3, #0]
 80005fc:	23d8      	movs	r3, #216	; 0xd8
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	429a      	cmp	r2, r3
 8000602:	d205      	bcs.n	8000610 <main+0x114>
			 	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <main+0x188>)
 8000606:	2200      	movs	r2, #0
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0018      	movs	r0, r3
 800060c:	f001 f99a 	bl	8001944 <HAL_GPIO_WritePin>

			//  HAL_Delay(500);



			  HAL_Delay(100);
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	f000 fa87 	bl	8000b24 <HAL_Delay>


		        // Switch on emitters in sequence
			HAL_GPIO_WritePin(EMITTER1_PORT, EMITTER1_PIN, GPIO_PIN_SET);
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <main+0x188>)
 8000618:	2201      	movs	r2, #1
 800061a:	2102      	movs	r1, #2
 800061c:	0018      	movs	r0, r3
 800061e:	f001 f991 	bl	8001944 <HAL_GPIO_WritePin>
			delay_ms(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f7ff ff5e 	bl	80004e4 <delay_ms>
			HAL_GPIO_WritePin(EMITTER1_PORT, EMITTER1_PIN, GPIO_PIN_RESET);
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <main+0x188>)
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 f988 	bl	8001944 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(EMITTER2_PORT, EMITTER2_PIN, GPIO_PIN_SET);
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <main+0x188>)
 8000636:	2201      	movs	r2, #1
 8000638:	2104      	movs	r1, #4
 800063a:	0018      	movs	r0, r3
 800063c:	f001 f982 	bl	8001944 <HAL_GPIO_WritePin>
			delay_ms(100);
 8000640:	2064      	movs	r0, #100	; 0x64
 8000642:	f7ff ff4f 	bl	80004e4 <delay_ms>
			HAL_GPIO_WritePin(EMITTER2_PORT, EMITTER2_PIN, GPIO_PIN_RESET);
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <main+0x188>)
 8000648:	2200      	movs	r2, #0
 800064a:	2104      	movs	r1, #4
 800064c:	0018      	movs	r0, r3
 800064e:	f001 f979 	bl	8001944 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(EMITTER3_PORT, EMITTER3_PIN, GPIO_PIN_SET);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <main+0x188>)
 8000658:	2201      	movs	r2, #1
 800065a:	0019      	movs	r1, r3
 800065c:	f001 f972 	bl	8001944 <HAL_GPIO_WritePin>
			delay_ms(100);
 8000660:	2064      	movs	r0, #100	; 0x64
 8000662:	f7ff ff3f 	bl	80004e4 <delay_ms>
			HAL_GPIO_WritePin(EMITTER3_PORT, EMITTER3_PIN, GPIO_PIN_RESET);
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <main+0x188>)
 800066c:	2200      	movs	r2, #0
 800066e:	0019      	movs	r1, r3
 8000670:	f001 f968 	bl	8001944 <HAL_GPIO_WritePin>
	     ADC1->CHSELR = ADC_CHSELR_CHSEL1;
 8000674:	e751      	b.n	800051a <main+0x1e>
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40012400 	.word	0x40012400
 800067c:	20000068 	.word	0x20000068
 8000680:	20000028 	.word	0x20000028
 8000684:	48000400 	.word	0x48000400
 8000688:	2000006a 	.word	0x2000006a
 800068c:	2000006c 	.word	0x2000006c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b091      	sub	sp, #68	; 0x44
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	2410      	movs	r4, #16
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2330      	movs	r3, #48	; 0x30
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f001 fdab 	bl	80021fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	003b      	movs	r3, r7
 80006a8:	0018      	movs	r0, r3
 80006aa:	2310      	movs	r3, #16
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f001 fda4 	bl	80021fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2212      	movs	r2, #18
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2210      	movs	r2, #16
 80006cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2210      	movs	r2, #16
 80006d2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 f94f 	bl	8001980 <HAL_RCC_OscConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006e6:	f000 f903 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	003b      	movs	r3, r7
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	003b      	movs	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fc54 	bl	8001fb4 <HAL_RCC_ClockConfig>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000710:	f000 f8ee 	bl	80008f0 <Error_Handler>
  }
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b011      	add	sp, #68	; 0x44
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	0018      	movs	r0, r3
 8000726:	230c      	movs	r3, #12
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f001 fd66 	bl	80021fc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000730:	4b33      	ldr	r3, [pc, #204]	; (8000800 <MX_ADC_Init+0xe4>)
 8000732:	4a34      	ldr	r2, [pc, #208]	; (8000804 <MX_ADC_Init+0xe8>)
 8000734:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <MX_ADC_Init+0xe4>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800073c:	4b30      	ldr	r3, [pc, #192]	; (8000800 <MX_ADC_Init+0xe4>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_ADC_Init+0xe4>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_ADC_Init+0xe4>)
 800074a:	2201      	movs	r2, #1
 800074c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_ADC_Init+0xe4>)
 8000750:	2204      	movs	r2, #4
 8000752:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_ADC_Init+0xe4>)
 8000756:	2200      	movs	r2, #0
 8000758:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_ADC_Init+0xe4>)
 800075c:	2200      	movs	r2, #0
 800075e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_ADC_Init+0xe4>)
 8000762:	2200      	movs	r2, #0
 8000764:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_ADC_Init+0xe4>)
 8000768:	2200      	movs	r2, #0
 800076a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_ADC_Init+0xe4>)
 800076e:	22c2      	movs	r2, #194	; 0xc2
 8000770:	32ff      	adds	r2, #255	; 0xff
 8000772:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_ADC_Init+0xe4>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_ADC_Init+0xe4>)
 800077c:	2224      	movs	r2, #36	; 0x24
 800077e:	2100      	movs	r1, #0
 8000780:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ADC_Init+0xe4>)
 8000784:	2201      	movs	r2, #1
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ADC_Init+0xe4>)
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f9ee 	bl	8000b6c <HAL_ADC_Init>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000794:	f000 f8ac 	bl	80008f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0152      	lsls	r2, r2, #5
 80007a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	0552      	lsls	r2, r2, #21
 80007ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_ADC_Init+0xe4>)
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fc51 	bl	800105c <HAL_ADC_ConfigChannel>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80007be:	f000 f897 	bl	80008f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2202      	movs	r2, #2
 80007c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c8:	1d3a      	adds	r2, r7, #4
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_ADC_Init+0xe4>)
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fc44 	bl	800105c <HAL_ADC_ConfigChannel>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80007d8:	f000 f88a 	bl	80008f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2203      	movs	r2, #3
 80007e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e2:	1d3a      	adds	r2, r7, #4
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_ADC_Init+0xe4>)
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fc37 	bl	800105c <HAL_ADC_ConfigChannel>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80007f2:	f000 f87d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b004      	add	sp, #16
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000028 	.word	0x20000028
 8000804:	40012400 	.word	0x40012400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	240c      	movs	r4, #12
 8000810:	193b      	adds	r3, r7, r4
 8000812:	0018      	movs	r0, r3
 8000814:	2314      	movs	r3, #20
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f001 fcef 	bl	80021fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_GPIO_Init+0x9c>)
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_GPIO_Init+0x9c>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0289      	lsls	r1, r1, #10
 8000828:	430a      	orrs	r2, r1
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_GPIO_Init+0x9c>)
 800082e:	695a      	ldr	r2, [r3, #20]
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	029b      	lsls	r3, r3, #10
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_GPIO_Init+0x9c>)
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_GPIO_Init+0x9c>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	02c9      	lsls	r1, r1, #11
 8000844:	430a      	orrs	r2, r1
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_GPIO_Init+0x9c>)
 800084a:	695a      	ldr	r2, [r3, #20]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	02db      	lsls	r3, r3, #11
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_GPIO_Init+0xa0>)
 8000858:	2200      	movs	r2, #0
 800085a:	21e0      	movs	r1, #224	; 0xe0
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f871 	bl	8001944 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = EMITTER1_PIN | EMITTER2_PIN | EMITTER3_PIN;
 8000862:	0021      	movs	r1, r4
 8000864:	187b      	adds	r3, r7, r1
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <MX_GPIO_Init+0xa4>)
 8000868:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2201      	movs	r2, #1
 800086e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	22e0      	movs	r2, #224	; 0xe0
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	187b      	adds	r3, r7, r1
 8000890:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <MX_GPIO_Init+0xa0>)
 8000892:	0019      	movs	r1, r3
 8000894:	0010      	movs	r0, r2
 8000896:	f000 fee5 	bl	8001664 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b009      	add	sp, #36	; 0x24
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000400 	.word	0x48000400
 80008ac:	00000406 	.word	0x00000406

080008b0 <read_adc>:

/* USER CODE BEGIN 4 */
uint16_t read_adc()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

	    HAL_ADC_Start(&hadc);
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <read_adc+0x38>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fa98 	bl	8000dec <HAL_ADC_Start>
	    while(HAL_ADC_PollForConversion(&hadc,5)!= HAL_OK);
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <read_adc+0x38>)
 80008c0:	2105      	movs	r1, #5
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fb26 	bl	8000f14 <HAL_ADC_PollForConversion>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d1f8      	bne.n	80008be <read_adc+0xe>
	    adc_value = HAL_ADC_GetValue(&hadc);
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <read_adc+0x38>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fbb8 	bl	8001044 <HAL_ADC_GetValue>
 80008d4:	0003      	movs	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <read_adc+0x3c>)
 80008da:	801a      	strh	r2, [r3, #0]
	    return adc_value;
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <read_adc+0x3c>)
 80008de:	881b      	ldrh	r3, [r3, #0]

}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000028 	.word	0x20000028
 80008ec:	2000006e 	.word	0x2000006e

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_MspInit+0x44>)
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_MspInit+0x44>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	619a      	str	r2, [r3, #24]
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_MspInit+0x44>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x44>)
 800091c:	69da      	ldr	r2, [r3, #28]
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_MspInit+0x44>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0549      	lsls	r1, r1, #21
 8000924:	430a      	orrs	r2, r1
 8000926:	61da      	str	r2, [r3, #28]
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_MspInit+0x44>)
 800092a:	69da      	ldr	r2, [r3, #28]
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	055b      	lsls	r3, r3, #21
 8000930:	4013      	ands	r3, r2
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	2414      	movs	r4, #20
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f001 fc50 	bl	80021fc <memset>
  if(hadc->Instance==ADC1)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <HAL_ADC_MspInit+0x84>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12b      	bne.n	80009be <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_ADC_MspInit+0x88>)
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_ADC_MspInit+0x88>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0089      	lsls	r1, r1, #2
 8000970:	430a      	orrs	r2, r1
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_ADC_MspInit+0x88>)
 8000976:	699a      	ldr	r2, [r3, #24]
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_ADC_MspInit+0x88>)
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_ADC_MspInit+0x88>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0289      	lsls	r1, r1, #10
 800098c:	430a      	orrs	r2, r1
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_ADC_MspInit+0x88>)
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	029b      	lsls	r3, r3, #10
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	220e      	movs	r2, #14
 80009a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2203      	movs	r2, #3
 80009a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	193a      	adds	r2, r7, r4
 80009b2:	2390      	movs	r3, #144	; 0x90
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fe53 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b00b      	add	sp, #44	; 0x2c
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40012400 	.word	0x40012400
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f87a 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000a0c:	f7ff fff7 	bl	80009fe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a36:	f001 fbe9 	bl	800220c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fd5f 	bl	80004fc <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a4c:	080022a4 	.word	0x080022a4
  ldr r2, =_sbss
 8000a50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a54:	20000074 	.word	0x20000074

08000a58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_COMP_IRQHandler>
	...

08000a5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <HAL_Init+0x24>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_Init+0x24>)
 8000a66:	2110      	movs	r1, #16
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f809 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a72:	f7ff ff43 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_InitTick+0x5c>)
 8000a8e:	681c      	ldr	r4, [r3, #0]
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_InitTick+0x60>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	0019      	movs	r1, r3
 8000a96:	23fa      	movs	r3, #250	; 0xfa
 8000a98:	0098      	lsls	r0, r3, #2
 8000a9a:	f7ff fb35 	bl	8000108 <__udivsi3>
 8000a9e:	0003      	movs	r3, r0
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	0020      	movs	r0, r4
 8000aa4:	f7ff fb30 	bl	8000108 <__udivsi3>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fdcd 	bl	800164a <HAL_SYSTICK_Config>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e00f      	b.n	8000ad8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d80b      	bhi.n	8000ad6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	425b      	negs	r3, r3
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fdaa 	bl	8001620 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_InitTick+0x64>)
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b003      	add	sp, #12
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x1c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	001a      	movs	r2, r3
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x20>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	18d2      	adds	r2, r2, r3
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_IncTick+0x20>)
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000070 	.word	0x20000070

08000b10 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_GetTick+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000070 	.word	0x20000070

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff fff0 	bl	8000b10 <HAL_GetTick>
 8000b30:	0003      	movs	r3, r0
 8000b32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	001a      	movs	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	189b      	adds	r3, r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	f7ff ffe0 	bl	8000b10 <HAL_GetTick>
 8000b50:	0002      	movs	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b004      	add	sp, #16
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b74:	230f      	movs	r3, #15
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e125      	b.n	8000dd6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10a      	bne.n	8000ba8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2234      	movs	r2, #52	; 0x34
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fece 	bl	8000944 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bac:	2210      	movs	r2, #16
 8000bae:	4013      	ands	r3, r2
 8000bb0:	d000      	beq.n	8000bb4 <HAL_ADC_Init+0x48>
 8000bb2:	e103      	b.n	8000dbc <HAL_ADC_Init+0x250>
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d000      	beq.n	8000bc0 <HAL_ADC_Init+0x54>
 8000bbe:	e0fd      	b.n	8000dbc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000bca:	d000      	beq.n	8000bce <HAL_ADC_Init+0x62>
 8000bcc:	e0f6      	b.n	8000dbc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd2:	4a83      	ldr	r2, [pc, #524]	; (8000de0 <HAL_ADC_Init+0x274>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2203      	movs	r2, #3
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d112      	bne.n	8000c12 <HAL_ADC_Init+0xa6>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d009      	beq.n	8000c0e <HAL_ADC_Init+0xa2>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	401a      	ands	r2, r3
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d101      	bne.n	8000c12 <HAL_ADC_Init+0xa6>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <HAL_ADC_Init+0xa8>
 8000c12:	2300      	movs	r3, #0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d116      	bne.n	8000c46 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	2218      	movs	r2, #24
 8000c20:	4393      	bics	r3, r2
 8000c22:	0019      	movs	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	0899      	lsrs	r1, r3, #2
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4964      	ldr	r1, [pc, #400]	; (8000de4 <HAL_ADC_Init+0x278>)
 8000c52:	400a      	ands	r2, r1
 8000c54:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7e1b      	ldrb	r3, [r3, #24]
 8000c5a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7e5b      	ldrb	r3, [r3, #25]
 8000c60:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c62:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7e9b      	ldrb	r3, [r3, #26]
 8000c68:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000c6a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d002      	beq.n	8000c7a <HAL_ADC_Init+0x10e>
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	015b      	lsls	r3, r3, #5
 8000c78:	e000      	b.n	8000c7c <HAL_ADC_Init+0x110>
 8000c7a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c7c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000c82:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d101      	bne.n	8000c90 <HAL_ADC_Init+0x124>
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	e000      	b.n	8000c92 <HAL_ADC_Init+0x126>
 8000c90:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c92:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2124      	movs	r1, #36	; 0x24
 8000c98:	5c5b      	ldrb	r3, [r3, r1]
 8000c9a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c9c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7edb      	ldrb	r3, [r3, #27]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d115      	bne.n	8000cd8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7e9b      	ldrb	r3, [r3, #26]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d105      	bne.n	8000cc0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	0252      	lsls	r2, r2, #9
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	e00b      	b.n	8000cd8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69da      	ldr	r2, [r3, #28]
 8000cdc:	23c2      	movs	r3, #194	; 0xc2
 8000cde:	33ff      	adds	r3, #255	; 0xff
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d007      	beq.n	8000cf4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000cec:	4313      	orrs	r3, r2
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68d9      	ldr	r1, [r3, #12]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	055b      	lsls	r3, r3, #21
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d01b      	beq.n	8000d48 <HAL_ADC_Init+0x1dc>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d017      	beq.n	8000d48 <HAL_ADC_Init+0x1dc>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d013      	beq.n	8000d48 <HAL_ADC_Init+0x1dc>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d00f      	beq.n	8000d48 <HAL_ADC_Init+0x1dc>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d00b      	beq.n	8000d48 <HAL_ADC_Init+0x1dc>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d007      	beq.n	8000d48 <HAL_ADC_Init+0x1dc>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d003      	beq.n	8000d48 <HAL_ADC_Init+0x1dc>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	2b07      	cmp	r3, #7
 8000d46:	d112      	bne.n	8000d6e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2107      	movs	r1, #7
 8000d54:	438a      	bics	r2, r1
 8000d56:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6959      	ldr	r1, [r3, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	2207      	movs	r2, #7
 8000d64:	401a      	ands	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <HAL_ADC_Init+0x27c>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d10b      	bne.n	8000d96 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4393      	bics	r3, r2
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d94:	e01c      	b.n	8000dd0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9a:	2212      	movs	r2, #18
 8000d9c:	4393      	bics	r3, r2
 8000d9e:	2210      	movs	r2, #16
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000daa:	2201      	movs	r2, #1
 8000dac:	431a      	orrs	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000db2:	230f      	movs	r3, #15
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dba:	e009      	b.n	8000dd0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b004      	add	sp, #16
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	fffffefd 	.word	0xfffffefd
 8000de4:	fffe0219 	.word	0xfffe0219
 8000de8:	833fffe7 	.word	0x833fffe7

08000dec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df4:	230f      	movs	r3, #15
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2204      	movs	r2, #4
 8000e04:	4013      	ands	r3, r2
 8000e06:	d138      	bne.n	8000e7a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2234      	movs	r2, #52	; 0x34
 8000e0c:	5c9b      	ldrb	r3, [r3, r2]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d101      	bne.n	8000e16 <HAL_ADC_Start+0x2a>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e038      	b.n	8000e88 <HAL_ADC_Start+0x9c>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2234      	movs	r2, #52	; 0x34
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7e5b      	ldrb	r3, [r3, #25]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d007      	beq.n	8000e36 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e26:	230f      	movs	r3, #15
 8000e28:	18fc      	adds	r4, r7, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 fa23 	bl	8001278 <ADC_Enable>
 8000e32:	0003      	movs	r3, r0
 8000e34:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e36:	230f      	movs	r3, #15
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d120      	bne.n	8000e82 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <HAL_ADC_Start+0xa4>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	0052      	lsls	r2, r2, #1
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2234      	movs	r2, #52	; 0x34
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	221c      	movs	r2, #28
 8000e66:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2104      	movs	r1, #4
 8000e74:	430a      	orrs	r2, r1
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	e003      	b.n	8000e82 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	2202      	movs	r2, #2
 8000e80:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e82:	230f      	movs	r3, #15
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	781b      	ldrb	r3, [r3, #0]
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b005      	add	sp, #20
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	fffff0fe 	.word	0xfffff0fe

08000e94 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000e94:	b5b0      	push	{r4, r5, r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2234      	movs	r2, #52	; 0x34
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_Stop+0x1e>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e029      	b.n	8000f06 <HAL_ADC_Stop+0x72>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2234      	movs	r2, #52	; 0x34
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000eba:	250f      	movs	r5, #15
 8000ebc:	197c      	adds	r4, r7, r5
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 face 	bl	8001462 <ADC_ConversionStop>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000eca:	197b      	adds	r3, r7, r5
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d112      	bne.n	8000ef8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000ed2:	197c      	adds	r4, r7, r5
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 fa52 	bl	8001380 <ADC_Disable>
 8000edc:	0003      	movs	r3, r0
 8000ede:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000ee0:	197b      	adds	r3, r7, r5
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d107      	bne.n	8000ef8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eec:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_ADC_Stop+0x7c>)
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2234      	movs	r2, #52	; 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f00:	230f      	movs	r3, #15
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	781b      	ldrb	r3, [r3, #0]
}
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b004      	add	sp, #16
 8000f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	fffffefe 	.word	0xfffffefe

08000f14 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d102      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f26:	2308      	movs	r3, #8
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	e014      	b.n	8000f56 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10b      	bne.n	8000f52 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3e:	2220      	movs	r2, #32
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2234      	movs	r2, #52	; 0x34
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e071      	b.n	8001036 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f52:	230c      	movs	r3, #12
 8000f54:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f56:	f7ff fddb 	bl	8000b10 <HAL_GetTick>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f5e:	e01f      	b.n	8000fa0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	d01c      	beq.n	8000fa0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_ADC_PollForConversion+0x68>
 8000f6c:	f7ff fdd0 	bl	8000b10 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d211      	bcs.n	8000fa0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4013      	ands	r3, r2
 8000f86:	d10b      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2234      	movs	r2, #52	; 0x34
 8000f98:	2100      	movs	r1, #0
 8000f9a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e04a      	b.n	8001036 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d0d9      	beq.n	8000f60 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	23c0      	movs	r3, #192	; 0xc0
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d12d      	bne.n	8001024 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d129      	bne.n	8001024 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d122      	bne.n	8001024 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d110      	bne.n	800100c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	210c      	movs	r1, #12
 8000ff6:	438a      	bics	r2, r1
 8000ff8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_ADC_PollForConversion+0x12c>)
 8001000:	4013      	ands	r3, r2
 8001002:	2201      	movs	r2, #1
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	639a      	str	r2, [r3, #56]	; 0x38
 800100a:	e00b      	b.n	8001024 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001010:	2220      	movs	r2, #32
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101c:	2201      	movs	r2, #1
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7e1b      	ldrb	r3, [r3, #24]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	220c      	movs	r2, #12
 8001032:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	fffffefe 	.word	0xfffffefe

08001044 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001066:	230f      	movs	r3, #15
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	055b      	lsls	r3, r3, #21
 800107a:	429a      	cmp	r2, r3
 800107c:	d011      	beq.n	80010a2 <HAL_ADC_ConfigChannel+0x46>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	2b01      	cmp	r3, #1
 8001084:	d00d      	beq.n	80010a2 <HAL_ADC_ConfigChannel+0x46>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	2b02      	cmp	r3, #2
 800108c:	d009      	beq.n	80010a2 <HAL_ADC_ConfigChannel+0x46>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	2b03      	cmp	r3, #3
 8001094:	d005      	beq.n	80010a2 <HAL_ADC_ConfigChannel+0x46>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	2b04      	cmp	r3, #4
 800109c:	d001      	beq.n	80010a2 <HAL_ADC_ConfigChannel+0x46>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2234      	movs	r2, #52	; 0x34
 80010a6:	5c9b      	ldrb	r3, [r3, r2]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x54>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e0d0      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1f6>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2234      	movs	r2, #52	; 0x34
 80010b4:	2101      	movs	r1, #1
 80010b6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2204      	movs	r2, #4
 80010c0:	4013      	ands	r3, r2
 80010c2:	d000      	beq.n	80010c6 <HAL_ADC_ConfigChannel+0x6a>
 80010c4:	e0b4      	b.n	8001230 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4a64      	ldr	r2, [pc, #400]	; (800125c <HAL_ADC_ConfigChannel+0x200>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d100      	bne.n	80010d2 <HAL_ADC_ConfigChannel+0x76>
 80010d0:	e082      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	409a      	lsls	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	055b      	lsls	r3, r3, #21
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d037      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d033      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	2b02      	cmp	r3, #2
 8001102:	d02f      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	2b03      	cmp	r3, #3
 800110a:	d02b      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	2b04      	cmp	r3, #4
 8001112:	d027      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001118:	2b05      	cmp	r3, #5
 800111a:	d023      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	2b06      	cmp	r3, #6
 8001122:	d01f      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001128:	2b07      	cmp	r3, #7
 800112a:	d01b      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	2107      	movs	r1, #7
 8001138:	400b      	ands	r3, r1
 800113a:	429a      	cmp	r2, r3
 800113c:	d012      	beq.n	8001164 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2107      	movs	r1, #7
 800114a:	438a      	bics	r2, r1
 800114c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6959      	ldr	r1, [r3, #20]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2207      	movs	r2, #7
 800115a:	401a      	ands	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b10      	cmp	r3, #16
 800116a:	d007      	beq.n	800117c <HAL_ADC_ConfigChannel+0x120>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b11      	cmp	r3, #17
 8001172:	d003      	beq.n	800117c <HAL_ADC_ConfigChannel+0x120>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b12      	cmp	r3, #18
 800117a:	d163      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800117c:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_ADC_ConfigChannel+0x204>)
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b10      	cmp	r3, #16
 8001186:	d009      	beq.n	800119c <HAL_ADC_ConfigChannel+0x140>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b11      	cmp	r3, #17
 800118e:	d102      	bne.n	8001196 <HAL_ADC_ConfigChannel+0x13a>
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	03db      	lsls	r3, r3, #15
 8001194:	e004      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x144>
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	045b      	lsls	r3, r3, #17
 800119a:	e001      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x144>
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <HAL_ADC_ConfigChannel+0x204>)
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b10      	cmp	r3, #16
 80011ac:	d14a      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_ADC_ConfigChannel+0x208>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	492d      	ldr	r1, [pc, #180]	; (8001268 <HAL_ADC_ConfigChannel+0x20c>)
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7fe ffa7 	bl	8000108 <__udivsi3>
 80011ba:	0003      	movs	r3, r0
 80011bc:	001a      	movs	r2, r3
 80011be:	0013      	movs	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	189b      	adds	r3, r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f9      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x16e>
 80011d6:	e035      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2101      	movs	r1, #1
 80011e4:	4099      	lsls	r1, r3
 80011e6:	000b      	movs	r3, r1
 80011e8:	43d9      	mvns	r1, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	400a      	ands	r2, r1
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d007      	beq.n	800120a <HAL_ADC_ConfigChannel+0x1ae>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b11      	cmp	r3, #17
 8001200:	d003      	beq.n	800120a <HAL_ADC_ConfigChannel+0x1ae>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b12      	cmp	r3, #18
 8001208:	d11c      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_ADC_ConfigChannel+0x204>)
 800120c:	6819      	ldr	r1, [r3, #0]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b10      	cmp	r3, #16
 8001214:	d007      	beq.n	8001226 <HAL_ADC_ConfigChannel+0x1ca>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b11      	cmp	r3, #17
 800121c:	d101      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x1c6>
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_ADC_ConfigChannel+0x210>)
 8001220:	e002      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1cc>
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_ADC_ConfigChannel+0x214>)
 8001224:	e000      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1cc>
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_ADC_ConfigChannel+0x218>)
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_ADC_ConfigChannel+0x204>)
 800122a:	400b      	ands	r3, r1
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e009      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001234:	2220      	movs	r2, #32
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800123c:	230f      	movs	r3, #15
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2234      	movs	r2, #52	; 0x34
 8001248:	2100      	movs	r1, #0
 800124a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800124c:	230f      	movs	r3, #15
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	781b      	ldrb	r3, [r3, #0]
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	00001001 	.word	0x00001001
 8001260:	40012708 	.word	0x40012708
 8001264:	20000000 	.word	0x20000000
 8001268:	000f4240 	.word	0x000f4240
 800126c:	ffbfffff 	.word	0xffbfffff
 8001270:	feffffff 	.word	0xfeffffff
 8001274:	ff7fffff 	.word	0xff7fffff

08001278 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2203      	movs	r2, #3
 8001290:	4013      	ands	r3, r2
 8001292:	2b01      	cmp	r3, #1
 8001294:	d112      	bne.n	80012bc <ADC_Enable+0x44>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d009      	beq.n	80012b8 <ADC_Enable+0x40>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	401a      	ands	r2, r3
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d101      	bne.n	80012bc <ADC_Enable+0x44>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <ADC_Enable+0x46>
 80012bc:	2300      	movs	r3, #0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d152      	bne.n	8001368 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <ADC_Enable+0xfc>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	d00d      	beq.n	80012ea <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	2210      	movs	r2, #16
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	2201      	movs	r2, #1
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e03f      	b.n	800136a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <ADC_Enable+0x100>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	491f      	ldr	r1, [pc, #124]	; (800137c <ADC_Enable+0x104>)
 8001300:	0018      	movs	r0, r3
 8001302:	f7fe ff01 	bl	8000108 <__udivsi3>
 8001306:	0003      	movs	r3, r0
 8001308:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800130a:	e002      	b.n	8001312 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	3b01      	subs	r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f9      	bne.n	800130c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001318:	f7ff fbfa 	bl	8000b10 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001320:	e01b      	b.n	800135a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001322:	f7ff fbf5 	bl	8000b10 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d914      	bls.n	800135a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
 800133a:	2b01      	cmp	r3, #1
 800133c:	d00d      	beq.n	800135a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001342:	2210      	movs	r2, #16
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134e:	2201      	movs	r2, #1
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e007      	b.n	800136a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	2b01      	cmp	r3, #1
 8001366:	d1dc      	bne.n	8001322 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	80000017 	.word	0x80000017
 8001378:	20000000 	.word	0x20000000
 800137c:	000f4240 	.word	0x000f4240

08001380 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2203      	movs	r2, #3
 8001394:	4013      	ands	r3, r2
 8001396:	2b01      	cmp	r3, #1
 8001398:	d112      	bne.n	80013c0 <ADC_Disable+0x40>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d009      	beq.n	80013bc <ADC_Disable+0x3c>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	401a      	ands	r2, r3
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d101      	bne.n	80013c0 <ADC_Disable+0x40>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <ADC_Disable+0x42>
 80013c0:	2300      	movs	r3, #0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d048      	beq.n	8001458 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2205      	movs	r2, #5
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d110      	bne.n	80013f6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2102      	movs	r1, #2
 80013e0:	430a      	orrs	r2, r1
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2203      	movs	r2, #3
 80013ea:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013ec:	f7ff fb90 	bl	8000b10 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013f4:	e029      	b.n	800144a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	2210      	movs	r2, #16
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001406:	2201      	movs	r2, #1
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e023      	b.n	800145a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001412:	f7ff fb7d 	bl	8000b10 <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d914      	bls.n	800144a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	2b01      	cmp	r3, #1
 800142c:	d10d      	bne.n	800144a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	2210      	movs	r2, #16
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143e:	2201      	movs	r2, #1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e007      	b.n	800145a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2201      	movs	r2, #1
 8001452:	4013      	ands	r3, r2
 8001454:	2b01      	cmp	r3, #1
 8001456:	d0dc      	beq.n	8001412 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b004      	add	sp, #16
 8001460:	bd80      	pop	{r7, pc}

08001462 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2204      	movs	r2, #4
 8001476:	4013      	ands	r3, r2
 8001478:	d03a      	beq.n	80014f0 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2204      	movs	r2, #4
 8001482:	4013      	ands	r3, r2
 8001484:	2b04      	cmp	r3, #4
 8001486:	d10d      	bne.n	80014a4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001492:	d107      	bne.n	80014a4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2110      	movs	r1, #16
 80014a0:	430a      	orrs	r2, r1
 80014a2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fb34 	bl	8000b10 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014ac:	e01a      	b.n	80014e4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80014ae:	f7ff fb2f 	bl	8000b10 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d913      	bls.n	80014e4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2204      	movs	r2, #4
 80014c4:	4013      	ands	r3, r2
 80014c6:	d00d      	beq.n	80014e4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014cc:	2210      	movs	r2, #16
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d8:	2201      	movs	r2, #1
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e006      	b.n	80014f2 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2204      	movs	r2, #4
 80014ec:	4013      	ands	r3, r2
 80014ee:	d1de      	bne.n	80014ae <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b004      	add	sp, #16
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	0002      	movs	r2, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b7f      	cmp	r3, #127	; 0x7f
 8001510:	d828      	bhi.n	8001564 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001512:	4a2f      	ldr	r2, [pc, #188]	; (80015d0 <__NVIC_SetPriority+0xd4>)
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b25b      	sxtb	r3, r3
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	33c0      	adds	r3, #192	; 0xc0
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	589b      	ldr	r3, [r3, r2]
 8001522:	1dfa      	adds	r2, r7, #7
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	0011      	movs	r1, r2
 8001528:	2203      	movs	r2, #3
 800152a:	400a      	ands	r2, r1
 800152c:	00d2      	lsls	r2, r2, #3
 800152e:	21ff      	movs	r1, #255	; 0xff
 8001530:	4091      	lsls	r1, r2
 8001532:	000a      	movs	r2, r1
 8001534:	43d2      	mvns	r2, r2
 8001536:	401a      	ands	r2, r3
 8001538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	22ff      	movs	r2, #255	; 0xff
 8001540:	401a      	ands	r2, r3
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	0018      	movs	r0, r3
 8001548:	2303      	movs	r3, #3
 800154a:	4003      	ands	r3, r0
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001550:	481f      	ldr	r0, [pc, #124]	; (80015d0 <__NVIC_SetPriority+0xd4>)
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b25b      	sxtb	r3, r3
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	430a      	orrs	r2, r1
 800155c:	33c0      	adds	r3, #192	; 0xc0
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001562:	e031      	b.n	80015c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <__NVIC_SetPriority+0xd8>)
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	0019      	movs	r1, r3
 800156c:	230f      	movs	r3, #15
 800156e:	400b      	ands	r3, r1
 8001570:	3b08      	subs	r3, #8
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3306      	adds	r3, #6
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	3304      	adds	r3, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1dfa      	adds	r2, r7, #7
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	0011      	movs	r1, r2
 8001584:	2203      	movs	r2, #3
 8001586:	400a      	ands	r2, r1
 8001588:	00d2      	lsls	r2, r2, #3
 800158a:	21ff      	movs	r1, #255	; 0xff
 800158c:	4091      	lsls	r1, r2
 800158e:	000a      	movs	r2, r1
 8001590:	43d2      	mvns	r2, r2
 8001592:	401a      	ands	r2, r3
 8001594:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	401a      	ands	r2, r3
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	0018      	movs	r0, r3
 80015a4:	2303      	movs	r3, #3
 80015a6:	4003      	ands	r3, r0
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ac:	4809      	ldr	r0, [pc, #36]	; (80015d4 <__NVIC_SetPriority+0xd8>)
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	001c      	movs	r4, r3
 80015b4:	230f      	movs	r3, #15
 80015b6:	4023      	ands	r3, r4
 80015b8:	3b08      	subs	r3, #8
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	430a      	orrs	r2, r1
 80015be:	3306      	adds	r3, #6
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	18c3      	adds	r3, r0, r3
 80015c4:	3304      	adds	r3, #4
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b003      	add	sp, #12
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	045b      	lsls	r3, r3, #17
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d301      	bcc.n	80015f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ec:	2301      	movs	r3, #1
 80015ee:	e010      	b.n	8001612 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <SysTick_Config+0x44>)
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	3a01      	subs	r2, #1
 80015f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f8:	2301      	movs	r3, #1
 80015fa:	425b      	negs	r3, r3
 80015fc:	2103      	movs	r1, #3
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff ff7c 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x44>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x44>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	210f      	movs	r1, #15
 800162c:	187b      	adds	r3, r7, r1
 800162e:	1c02      	adds	r2, r0, #0
 8001630:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	187b      	adds	r3, r7, r1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b004      	add	sp, #16
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ffbf 	bl	80015d8 <SysTick_Config>
 800165a:	0003      	movs	r3, r0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e14f      	b.n	8001914 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4091      	lsls	r1, r2
 800167e:	000a      	movs	r2, r1
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <HAL_GPIO_Init+0x28>
 800168a:	e140      	b.n	800190e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	4013      	ands	r3, r2
 8001694:	2b01      	cmp	r3, #1
 8001696:	d005      	beq.n	80016a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d130      	bne.n	8001706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	43da      	mvns	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	409a      	lsls	r2, r3
 80016c6:	0013      	movs	r3, r2
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016da:	2201      	movs	r2, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	2201      	movs	r2, #1
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2203      	movs	r2, #3
 800170c:	4013      	ands	r3, r2
 800170e:	2b03      	cmp	r3, #3
 8001710:	d017      	beq.n	8001742 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	43da      	mvns	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d123      	bne.n	8001796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	58d3      	ldr	r3, [r2, r3]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2207      	movs	r2, #7
 8001760:	4013      	ands	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	220f      	movs	r2, #15
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2107      	movs	r1, #7
 800177a:	400b      	ands	r3, r1
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	6939      	ldr	r1, [r7, #16]
 8001794:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	401a      	ands	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	23c0      	movs	r3, #192	; 0xc0
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	4013      	ands	r3, r2
 80017d4:	d100      	bne.n	80017d8 <HAL_GPIO_Init+0x174>
 80017d6:	e09a      	b.n	800190e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d8:	4b54      	ldr	r3, [pc, #336]	; (800192c <HAL_GPIO_Init+0x2c8>)
 80017da:	699a      	ldr	r2, [r3, #24]
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_GPIO_Init+0x2c8>)
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	619a      	str	r2, [r3, #24]
 80017e4:	4b51      	ldr	r3, [pc, #324]	; (800192c <HAL_GPIO_Init+0x2c8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f0:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <HAL_GPIO_Init+0x2cc>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	589b      	ldr	r3, [r3, r2]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2203      	movs	r2, #3
 8001802:	4013      	ands	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	409a      	lsls	r2, r3
 800180a:	0013      	movs	r3, r2
 800180c:	43da      	mvns	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	2390      	movs	r3, #144	; 0x90
 8001818:	05db      	lsls	r3, r3, #23
 800181a:	429a      	cmp	r2, r3
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0x1e2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a44      	ldr	r2, [pc, #272]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x1de>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a43      	ldr	r2, [pc, #268]	; (8001938 <HAL_GPIO_Init+0x2d4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x1da>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a42      	ldr	r2, [pc, #264]	; (800193c <HAL_GPIO_Init+0x2d8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x1d6>
 8001836:	2303      	movs	r3, #3
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x1e4>
 800183a:	2305      	movs	r3, #5
 800183c:	e004      	b.n	8001848 <HAL_GPIO_Init+0x1e4>
 800183e:	2302      	movs	r3, #2
 8001840:	e002      	b.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001846:	2300      	movs	r3, #0
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	2103      	movs	r1, #3
 800184c:	400a      	ands	r2, r1
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	4093      	lsls	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001858:	4935      	ldr	r1, [pc, #212]	; (8001930 <HAL_GPIO_Init+0x2cc>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_GPIO_Init+0x2dc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43da      	mvns	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	035b      	lsls	r3, r3, #13
 800187e:	4013      	ands	r3, r2
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <HAL_GPIO_Init+0x2dc>)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_GPIO_Init+0x2dc>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43da      	mvns	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	039b      	lsls	r3, r3, #14
 80018a8:	4013      	ands	r3, r2
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_GPIO_Init+0x2dc>)
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_GPIO_Init+0x2dc>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43da      	mvns	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	029b      	lsls	r3, r3, #10
 80018d2:	4013      	ands	r3, r2
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_GPIO_Init+0x2dc>)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_GPIO_Init+0x2dc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	025b      	lsls	r3, r3, #9
 80018fc:	4013      	ands	r3, r2
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_GPIO_Init+0x2dc>)
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	40da      	lsrs	r2, r3
 800191c:	1e13      	subs	r3, r2, #0
 800191e:	d000      	beq.n	8001922 <HAL_GPIO_Init+0x2be>
 8001920:	e6a8      	b.n	8001674 <HAL_GPIO_Init+0x10>
  } 
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b006      	add	sp, #24
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	48000400 	.word	0x48000400
 8001938:	48000800 	.word	0x48000800
 800193c:	48000c00 	.word	0x48000c00
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	0008      	movs	r0, r1
 800194e:	0011      	movs	r1, r2
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	1c02      	adds	r2, r0, #0
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	1c7b      	adds	r3, r7, #1
 8001958:	1c0a      	adds	r2, r1, #0
 800195a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195c:	1c7b      	adds	r3, r7, #1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001964:	1cbb      	adds	r3, r7, #2
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196e:	1cbb      	adds	r3, r7, #2
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e301      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	4013      	ands	r3, r2
 800199a:	d100      	bne.n	800199e <HAL_RCC_OscConfig+0x1e>
 800199c:	e08d      	b.n	8001aba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800199e:	4bc3      	ldr	r3, [pc, #780]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	220c      	movs	r2, #12
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d00e      	beq.n	80019c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019aa:	4bc0      	ldr	r3, [pc, #768]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	220c      	movs	r2, #12
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x64>
 80019b6:	4bbd      	ldr	r3, [pc, #756]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	401a      	ands	r2, r3
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d10d      	bne.n	80019e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4bb8      	ldr	r3, [pc, #736]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_OscConfig+0x56>
 80019d4:	e070      	b.n	8001ab8 <HAL_RCC_OscConfig+0x138>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d000      	beq.n	80019e0 <HAL_RCC_OscConfig+0x60>
 80019de:	e06b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e2d8      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x7c>
 80019ec:	4baf      	ldr	r3, [pc, #700]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4bae      	ldr	r3, [pc, #696]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	0249      	lsls	r1, r1, #9
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e02f      	b.n	8001a5c <HAL_RCC_OscConfig+0xdc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x9e>
 8001a04:	4ba9      	ldr	r3, [pc, #676]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4ba8      	ldr	r3, [pc, #672]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	49a9      	ldr	r1, [pc, #676]	; (8001cb0 <HAL_RCC_OscConfig+0x330>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4ba6      	ldr	r3, [pc, #664]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4ba5      	ldr	r3, [pc, #660]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a16:	49a7      	ldr	r1, [pc, #668]	; (8001cb4 <HAL_RCC_OscConfig+0x334>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e01e      	b.n	8001a5c <HAL_RCC_OscConfig+0xdc>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d10e      	bne.n	8001a44 <HAL_RCC_OscConfig+0xc4>
 8001a26:	4ba1      	ldr	r3, [pc, #644]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4ba0      	ldr	r3, [pc, #640]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	02c9      	lsls	r1, r1, #11
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	4b9d      	ldr	r3, [pc, #628]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b9c      	ldr	r3, [pc, #624]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	0249      	lsls	r1, r1, #9
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xdc>
 8001a44:	4b99      	ldr	r3, [pc, #612]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b98      	ldr	r3, [pc, #608]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	4999      	ldr	r1, [pc, #612]	; (8001cb0 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4b96      	ldr	r3, [pc, #600]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b95      	ldr	r3, [pc, #596]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a56:	4997      	ldr	r1, [pc, #604]	; (8001cb4 <HAL_RCC_OscConfig+0x334>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d014      	beq.n	8001a8e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f854 	bl	8000b10 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6e:	f7ff f84f 	bl	8000b10 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	; 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e28a      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a80:	4b8a      	ldr	r3, [pc, #552]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	029b      	lsls	r3, r3, #10
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0xee>
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f83f 	bl	8000b10 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff f83a 	bl	8000b10 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e275      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	4b80      	ldr	r3, [pc, #512]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x118>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d100      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x146>
 8001ac4:	e069      	b.n	8001b9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ac6:	4b79      	ldr	r3, [pc, #484]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	220c      	movs	r2, #12
 8001acc:	4013      	ands	r3, r2
 8001ace:	d00b      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ad0:	4b76      	ldr	r3, [pc, #472]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d11c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x196>
 8001adc:	4b73      	ldr	r3, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d116      	bne.n	8001b16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae8:	4b70      	ldr	r3, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x17e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e24b      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	22f8      	movs	r2, #248	; 0xf8
 8001b04:	4393      	bics	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	00da      	lsls	r2, r3, #3
 8001b0e:	4b67      	ldr	r3, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b14:	e041      	b.n	8001b9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d024      	beq.n	8001b68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b62      	ldr	r3, [pc, #392]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fff1 	bl	8000b10 <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b34:	f7fe ffec 	bl	8000b10 <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e227      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b59      	ldr	r3, [pc, #356]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d0f1      	beq.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b56      	ldr	r3, [pc, #344]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	22f8      	movs	r2, #248	; 0xf8
 8001b56:	4393      	bics	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00da      	lsls	r2, r3, #3
 8001b60:	4b52      	ldr	r3, [pc, #328]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e018      	b.n	8001b9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	438a      	bics	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7fe ffcc 	bl	8000b10 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7fe ffc7 	bl	8000b10 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e202      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b90:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d1f1      	bne.n	8001b7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d036      	beq.n	8001c12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d019      	beq.n	8001be0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7fe ffaa 	bl	8000b10 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7fe ffa5 	bl	8000b10 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1e0      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd4:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f1      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x242>
 8001bde:	e018      	b.n	8001c12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	438a      	bics	r2, r1
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7fe ff90 	bl	8000b10 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7fe ff8b 	bl	8000b10 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e1c6      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d1f1      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2204      	movs	r2, #4
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x29e>
 8001c1c:	e0b4      	b.n	8001d88 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	201f      	movs	r0, #31
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	055b      	lsls	r3, r3, #21
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d110      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	0549      	lsls	r1, r1, #21
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	61da      	str	r2, [r3, #28]
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	055b      	lsls	r3, r3, #21
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_RCC_OscConfig+0x338>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d11a      	bne.n	8001c96 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_RCC_OscConfig+0x338>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_RCC_OscConfig+0x338>)
 8001c66:	2180      	movs	r1, #128	; 0x80
 8001c68:	0049      	lsls	r1, r1, #1
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7fe ff4f 	bl	8000b10 <HAL_GetTick>
 8001c72:	0003      	movs	r3, r0
 8001c74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c78:	f7fe ff4a 	bl	8000b10 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e185      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10e      	bne.n	8001cbc <HAL_RCC_OscConfig+0x33c>
 8001c9e:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	6a1a      	ldr	r2, [r3, #32]
 8001ca2:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	621a      	str	r2, [r3, #32]
 8001caa:	e035      	b.n	8001d18 <HAL_RCC_OscConfig+0x398>
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	fffeffff 	.word	0xfffeffff
 8001cb4:	fffbffff 	.word	0xfffbffff
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x35e>
 8001cc4:	4bb6      	ldr	r3, [pc, #728]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	4bb5      	ldr	r3, [pc, #724]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	438a      	bics	r2, r1
 8001cce:	621a      	str	r2, [r3, #32]
 8001cd0:	4bb3      	ldr	r3, [pc, #716]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	4bb2      	ldr	r3, [pc, #712]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	438a      	bics	r2, r1
 8001cda:	621a      	str	r2, [r3, #32]
 8001cdc:	e01c      	b.n	8001d18 <HAL_RCC_OscConfig+0x398>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x380>
 8001ce6:	4bae      	ldr	r3, [pc, #696]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	4bad      	ldr	r3, [pc, #692]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cec:	2104      	movs	r1, #4
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	621a      	str	r2, [r3, #32]
 8001cf2:	4bab      	ldr	r3, [pc, #684]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cf4:	6a1a      	ldr	r2, [r3, #32]
 8001cf6:	4baa      	ldr	r3, [pc, #680]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	621a      	str	r2, [r3, #32]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0x398>
 8001d00:	4ba7      	ldr	r3, [pc, #668]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d02:	6a1a      	ldr	r2, [r3, #32]
 8001d04:	4ba6      	ldr	r3, [pc, #664]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	438a      	bics	r2, r1
 8001d0a:	621a      	str	r2, [r3, #32]
 8001d0c:	4ba4      	ldr	r3, [pc, #656]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	4ba3      	ldr	r3, [pc, #652]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d12:	2104      	movs	r1, #4
 8001d14:	438a      	bics	r2, r1
 8001d16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d014      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7fe fef6 	bl	8000b10 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fef1 	bl	8000b10 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	4a9b      	ldr	r2, [pc, #620]	; (8001fa4 <HAL_RCC_OscConfig+0x624>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e12b      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	4b98      	ldr	r3, [pc, #608]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
 8001d48:	e013      	b.n	8001d72 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7fe fee1 	bl	8000b10 <HAL_GetTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	e009      	b.n	8001d68 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7fe fedc 	bl	8000b10 <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	4a91      	ldr	r2, [pc, #580]	; (8001fa4 <HAL_RCC_OscConfig+0x624>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e116      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d72:	231f      	movs	r3, #31
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4b88      	ldr	r3, [pc, #544]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d82:	4989      	ldr	r1, [pc, #548]	; (8001fa8 <HAL_RCC_OscConfig+0x628>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d12a      	bne.n	8001df0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d9a:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9e:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001da0:	2104      	movs	r1, #4
 8001da2:	430a      	orrs	r2, r1
 8001da4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001da6:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001daa:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db2:	f7fe fead 	bl	8000b10 <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dbc:	f7fe fea8 	bl	8000b10 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e0e3      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dce:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d0f1      	beq.n	8001dbc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001dd8:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ddc:	22f8      	movs	r2, #248	; 0xf8
 8001dde:	4393      	bics	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	00da      	lsls	r2, r3, #3
 8001de8:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34
 8001dee:	e034      	b.n	8001e5a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	3305      	adds	r3, #5
 8001df6:	d111      	bne.n	8001e1c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001df8:	4b69      	ldr	r3, [pc, #420]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfc:	4b68      	ldr	r3, [pc, #416]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001dfe:	2104      	movs	r1, #4
 8001e00:	438a      	bics	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e08:	22f8      	movs	r2, #248	; 0xf8
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	00da      	lsls	r2, r3, #3
 8001e14:	4b62      	ldr	r3, [pc, #392]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
 8001e1a:	e01e      	b.n	8001e5a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e1c:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e20:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e22:	2104      	movs	r1, #4
 8001e24:	430a      	orrs	r2, r1
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e28:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2c:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	438a      	bics	r2, r1
 8001e32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7fe fe6c 	bl	8000b10 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e3e:	f7fe fe67 	bl	8000b10 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0a2      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f1      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d100      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4e4>
 8001e62:	e097      	b.n	8001f94 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e64:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	220c      	movs	r2, #12
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d100      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4f2>
 8001e70:	e06b      	b.n	8001f4a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d14c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001e80:	494a      	ldr	r1, [pc, #296]	; (8001fac <HAL_RCC_OscConfig+0x62c>)
 8001e82:	400a      	ands	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe fe43 	bl	8000b10 <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e90:	f7fe fe3e 	bl	8000b10 <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e079      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	049b      	lsls	r3, r3, #18
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec2:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <HAL_RCC_OscConfig+0x630>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0449      	lsls	r1, r1, #17
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fe11 	bl	8000b10 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe fe0c 	bl	8000b10 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e047      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	049b      	lsls	r3, r3, #18
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x574>
 8001f12:	e03f      	b.n	8001f94 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	4924      	ldr	r1, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x62c>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fdf6 	bl	8000b10 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe fdf1 	bl	8000b10 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e02c      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	049b      	lsls	r3, r3, #18
 8001f44:	4013      	ands	r3, r2
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x5aa>
 8001f48:	e024      	b.n	8001f94 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e01f      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_RCC_OscConfig+0x620>)
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	401a      	ands	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d10e      	bne.n	8001f90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	220f      	movs	r2, #15
 8001f76:	401a      	ands	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	23f0      	movs	r3, #240	; 0xf0
 8001f84:	039b      	lsls	r3, r3, #14
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b008      	add	sp, #32
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	00001388 	.word	0x00001388
 8001fa8:	efffffff 	.word	0xefffffff
 8001fac:	feffffff 	.word	0xfeffffff
 8001fb0:	ffc2ffff 	.word	0xffc2ffff

08001fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0b3      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_RCC_ClockConfig+0x184>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d911      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b58      	ldr	r3, [pc, #352]	; (8002138 <HAL_RCC_ClockConfig+0x184>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4393      	bics	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_RCC_ClockConfig+0x184>)
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_ClockConfig+0x184>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e09a      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2202      	movs	r2, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d015      	beq.n	8002030 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2204      	movs	r2, #4
 800200a:	4013      	ands	r3, r2
 800200c:	d006      	beq.n	800201c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800200e:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 8002014:	21e0      	movs	r1, #224	; 0xe0
 8002016:	00c9      	lsls	r1, r1, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	22f0      	movs	r2, #240	; 0xf0
 8002022:	4393      	bics	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	4013      	ands	r3, r2
 8002038:	d040      	beq.n	80020bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d114      	bne.n	8002078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06e      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b38      	ldr	r3, [pc, #224]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	049b      	lsls	r3, r3, #18
 8002062:	4013      	ands	r3, r2
 8002064:	d108      	bne.n	8002078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e062      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e05b      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002078:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	4393      	bics	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7fe fd40 	bl	8000b10 <HAL_GetTick>
 8002090:	0003      	movs	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002094:	e009      	b.n	80020aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002096:	f7fe fd3b 	bl	8000b10 <HAL_GetTick>
 800209a:	0002      	movs	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	4a27      	ldr	r2, [pc, #156]	; (8002140 <HAL_RCC_ClockConfig+0x18c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e042      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	220c      	movs	r2, #12
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1ec      	bne.n	8002096 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_ClockConfig+0x184>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d211      	bcs.n	80020ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCC_ClockConfig+0x184>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_RCC_ClockConfig+0x184>)
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_RCC_ClockConfig+0x184>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	4013      	ands	r3, r2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e020      	b.n	8002130 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_RCC_ClockConfig+0x190>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800210c:	f000 f820 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002110:	0001      	movs	r1, r0
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x188>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	220f      	movs	r2, #15
 800211a:	4013      	ands	r3, r2
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x194>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	000a      	movs	r2, r1
 8002122:	40da      	lsrs	r2, r3
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x198>)
 8002126:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002128:	2003      	movs	r0, #3
 800212a:	f7fe fcab 	bl	8000a84 <HAL_InitTick>
  
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b004      	add	sp, #16
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40022000 	.word	0x40022000
 800213c:	40021000 	.word	0x40021000
 8002140:	00001388 	.word	0x00001388
 8002144:	fffff8ff 	.word	0xfffff8ff
 8002148:	0800226c 	.word	0x0800226c
 800214c:	20000000 	.word	0x20000000

08002150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	220c      	movs	r2, #12
 8002174:	4013      	ands	r3, r2
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x30>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x36>
 800217e:	e02c      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002182:	613b      	str	r3, [r7, #16]
      break;
 8002184:	e02c      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	220f      	movs	r2, #15
 800218c:	4013      	ands	r3, r2
 800218e:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002190:	5cd3      	ldrb	r3, [r2, r3]
 8002192:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	220f      	movs	r2, #15
 800219a:	4013      	ands	r3, r2
 800219c:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	025b      	lsls	r3, r3, #9
 80021a8:	4013      	ands	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	4810      	ldr	r0, [pc, #64]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021b0:	f7fd ffaa 	bl	8000108 <__udivsi3>
 80021b4:	0003      	movs	r3, r0
 80021b6:	001a      	movs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4353      	muls	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e009      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	000a      	movs	r2, r1
 80021c4:	0152      	lsls	r2, r2, #5
 80021c6:	1a52      	subs	r2, r2, r1
 80021c8:	0193      	lsls	r3, r2, #6
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	185b      	adds	r3, r3, r1
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
      break;
 80021d8:	e002      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021dc:	613b      	str	r3, [r7, #16]
      break;
 80021de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021e0:	693b      	ldr	r3, [r7, #16]
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b006      	add	sp, #24
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	0800227c 	.word	0x0800227c
 80021f8:	0800228c 	.word	0x0800228c

080021fc <memset>:
 80021fc:	0003      	movs	r3, r0
 80021fe:	1882      	adds	r2, r0, r2
 8002200:	4293      	cmp	r3, r2
 8002202:	d100      	bne.n	8002206 <memset+0xa>
 8002204:	4770      	bx	lr
 8002206:	7019      	strb	r1, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	e7f9      	b.n	8002200 <memset+0x4>

0800220c <__libc_init_array>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	2600      	movs	r6, #0
 8002210:	4c0c      	ldr	r4, [pc, #48]	; (8002244 <__libc_init_array+0x38>)
 8002212:	4d0d      	ldr	r5, [pc, #52]	; (8002248 <__libc_init_array+0x3c>)
 8002214:	1b64      	subs	r4, r4, r5
 8002216:	10a4      	asrs	r4, r4, #2
 8002218:	42a6      	cmp	r6, r4
 800221a:	d109      	bne.n	8002230 <__libc_init_array+0x24>
 800221c:	2600      	movs	r6, #0
 800221e:	f000 f819 	bl	8002254 <_init>
 8002222:	4c0a      	ldr	r4, [pc, #40]	; (800224c <__libc_init_array+0x40>)
 8002224:	4d0a      	ldr	r5, [pc, #40]	; (8002250 <__libc_init_array+0x44>)
 8002226:	1b64      	subs	r4, r4, r5
 8002228:	10a4      	asrs	r4, r4, #2
 800222a:	42a6      	cmp	r6, r4
 800222c:	d105      	bne.n	800223a <__libc_init_array+0x2e>
 800222e:	bd70      	pop	{r4, r5, r6, pc}
 8002230:	00b3      	lsls	r3, r6, #2
 8002232:	58eb      	ldr	r3, [r5, r3]
 8002234:	4798      	blx	r3
 8002236:	3601      	adds	r6, #1
 8002238:	e7ee      	b.n	8002218 <__libc_init_array+0xc>
 800223a:	00b3      	lsls	r3, r6, #2
 800223c:	58eb      	ldr	r3, [r5, r3]
 800223e:	4798      	blx	r3
 8002240:	3601      	adds	r6, #1
 8002242:	e7f2      	b.n	800222a <__libc_init_array+0x1e>
 8002244:	0800229c 	.word	0x0800229c
 8002248:	0800229c 	.word	0x0800229c
 800224c:	080022a0 	.word	0x080022a0
 8002250:	0800229c 	.word	0x0800229c

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
